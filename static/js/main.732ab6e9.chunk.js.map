{"version":3,"sources":["components/pages/HomePage.js","components/pages/messages/InlineError.js","components/pages/forms/LoginForm.js","components/pages/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","to","InlineError","text","style","color","LoginForm","state","data","email","password","loading","errors","onChange","e","setState","target","name","value","onSubmit","validate","Object","keys","length","props","submit","Validator","isEmail","this","Form","Field","error","htmlFor","type","id","placeholder","passwords","Button","primary","React","Component","LoginPage","console","log","App","className","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gNAUeA,EAPE,kBAAM,6BACtB,yCACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,W,qFCKcC,EAPK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,0BAAMC,MAAO,CAACC,MAAO,YAAeF,ICsEvDG,E,4MAlEXC,MAAQ,CACJC,KAAM,CACFC,MAAO,GACPC,SAAU,IAEdC,SAAS,EACTC,OAAQ,I,EAGZC,SAAW,SAAAC,GAAC,OAAI,EAAKC,SAAS,CACzBP,KAAK,2BAAK,EAAKD,MAAMC,MAAjB,kBAAwBM,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,W,EAG1DC,SAAW,SAAAL,GACP,IAAMF,EAAS,EAAKQ,SAAS,EAAKb,MAAMC,MACxC,EAAKO,SAAS,CAAEH,WACmB,IAA/BS,OAAOC,KAAKV,GAAQW,QACpB,EAAKC,MAAMC,OAAO,EAAKlB,MAAMC,O,EAIrCY,SAAW,SAACZ,GACR,IAAMI,EAAS,GAGf,OAFKc,IAAUC,QAAQnB,EAAKC,SAAQG,EAAOH,MAAQ,iBAC9CD,EAAKE,WAAUE,EAAOF,SAAW,kBAC/BE,G,uDAGD,IAAD,EACoBgB,KAAKrB,MAAtBC,EADH,EACGA,KAAMI,EADT,EACSA,OACd,OACI,kBAACiB,EAAA,EAAD,CAAMV,SAAUS,KAAKT,UACjB,kBAACU,EAAA,EAAKC,MAAN,CAAYC,QAASnB,EAAOH,OACxB,2BAAOuB,QAAQ,SAAf,SACA,2BACIC,KAAK,QACLC,GAAG,QACHjB,KAAK,QACLkB,YAAY,oBACZjB,MAAOV,EAAKC,MACZI,SAAUe,KAAKf,WAElBD,EAAOH,OAAS,kBAAC,EAAD,CAAaN,KAAMS,EAAOH,SAE/C,kBAACoB,EAAA,EAAKC,MAAN,CAAYlB,SAAUA,EAAOF,UACzB,2BAAOsB,QAAQ,YAAf,YACA,2BACIC,KAAK,WACLC,GAAG,WACHjB,KAAK,WACLkB,YAAY,eACZjB,MAAOV,EAAKE,SACZG,SAAUe,KAAKf,WAElBD,EAAOF,UAAY,kBAAC,EAAD,CAAaP,KAAMS,EAAOwB,aAElD,kBAACC,EAAA,EAAD,CAAQC,SAAO,GAAf,c,GAzDQC,IAAMC,WCmBfC,E,4MAnBPhB,OAAS,SAACjB,GACNkC,QAAQC,IAAInC,I,uDAIhB,OACI,6BACA,0CAEA,kBAAC,EAAD,CAAWiB,OAAQG,KAAKH,c,GAXZc,IAAMC,WCSfI,EARH,kBAAM,yBAAKC,UAAU,gBAE/B,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWhD,IACxC,kBAAC,IAAD,CAAO8C,KAAK,SAASC,OAAO,EAAMC,UAAWP,MCI3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLW,QAAQX,MAAMA,EAAMmC,c","file":"static/js/main.732ab6e9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HomePage = () => <div>\n <h1>Home Page</h1>\n <Link to=\"/login\">Login</Link>\n</div>;\n\n\n\nexport default HomePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InlineError = ({ text }) => <span style={{color: \"#ae5856\" }}>{ text }</span>;\n\nInlineError.propTypes = {\n    text: PropTypes.string.isRequired\n};\n\n\nexport default InlineError;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button } from 'semantic-ui-react';\nimport Validator from 'validator';\nimport InlineError from '../messages/InlineError';\n\nclass LoginForm extends React.Component {\n    state = {\n        data: {\n            email: '',\n            password: ''\n        },\n        loading: false,\n        errors: {}\n    }\n\n    onChange = e => this.setState({\n         data: {...this.state.data, [e.target.name]: e.target.value}\n    });\n\n    onSubmit = e => {\n        const errors = this.validate(this.state.data);\n        this.setState({ errors });\n        if (Object.keys(errors).length === 0) {\n            this.props.submit(this.state.data);\n        }\n    };\n\n    validate = (data) => {\n        const errors = {};\n        if (!Validator.isEmail(data.email)) errors.email = \"Invalid email\";\n        if (!data.password) errors.password = \"Can't be blank\";\n        return errors;\n    }\n\n    render() {\n        const { data, errors } = this.state;\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Form.Field error={!!errors.email}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input \n                        type=\"email\" \n                        id=\"email\" \n                        name=\"email\" \n                        placeholder=\"example@gmail.com\" \n                        value={data.email}\n                        onChange={this.onChange}\n                    />\n                    {errors.email && <InlineError text={errors.email} />}\n                </Form.Field>\n                <Form.Field errors={!!errors.password}>\n                    <label htmlFor=\"password\">Password</label>\n                    <input \n                        type=\"password\" \n                        id=\"password\" \n                        name=\"password\" \n                        placeholder=\"************\" \n                        value={data.password}\n                        onChange={this.onChange}\n                    />\n                    {errors.password && <InlineError text={errors.passwords} />}\n                </Form.Field>\n                <Button primary>Login</Button>\n            </Form>\n        );\n    }\n}\n\nLoginForm.propTypes = {\n    submit: PropTypes.func.isRequired\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from './forms/LoginForm';\n\n\nclass LoginPage extends React.Component {\n\n        submit = (data) => {\n            console.log(data);\n        }\n\n    render() {\n        return (\n            <div>\n            <h1>Login Page</h1>\n\n            <LoginForm submit={this.submit} />\n            </div>\n        );\n    }\n}\n\n\n\n\n\nexport default LoginPage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport HomePage from \"./components/pages/HomePage\";\nimport LoginPage from \"./components/pages/LoginPage\";\n\nconst App = () => <div className=\"ui container\">\n  \n  <Route path=\"/\" exact={true} component={HomePage} />\n  <Route path=\"/login\" exact={true} component={LoginPage} />\n</div>;\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}